package parser;

import ast.*;
import ast.List;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
@SuppressWarnings("unchecked")
public class Parser extends beaver.Parser {
  static public class Terminals {
    static public final short EOF = 0;
    static public final short AD = 1;
    static public final short AH = 2;
    static public final short Q = 3;
    static public final short AJ = 4;
    static public final short AI = 5;
    static public final short K = 6;
    static public final short D = 7;
    static public final short P = 8;
    static public final short AF = 9;
    static public final short AG = 10;
    static public final short W = 11;
    static public final short AL = 12;
    static public final short X = 13;
    static public final short AE = 14;
    static public final short AC = 15;
    static public final short AA = 16;
    static public final short Z = 17;
    static public final short AB = 18;
    static public final short V = 19;
    static public final short G = 20;
    static public final short A = 21;
    static public final short M = 22;
    static public final short T = 23;
    static public final short C = 24;
    static public final short AM = 25;
    static public final short U = 26;
    static public final short E = 27;
    static public final short N = 28;
    static public final short B = 29;
    static public final short J = 30;
    static public final short O = 31;
    static public final short R = 32;
    static public final short S = 33;
    static public final short H = 34;
    static public final short Y = 35;
  }

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjMdby5TKL$jvaUrfRm8X0519014903AjiLK1SG4MG10qI6v8IrWGJie18014N510tS44" +
      "G44H5HK05P14HeRRLshgKsiKkjjBQ5gssQ4#$kNFVoxnvCyyu2Oy$cZk$RywvordkdJjdpi" +
      "qB43o6MRWSb#4AN8chC19NOnH6ungCmGzGW0aeH15#Y8aenYHCnXJaOHokntXCHmcMO1KwO" +
      "HtMOoEUn5Du6ctH7cSX0#rm3ZhWN7J4GjoAwz05Qz5L7f6$mi1Zg9PIhE7L2ld8GIccOXfc" +
      "u4QqmDqdt9T8YrMefcThaO1MSXGRU9MZJDwbRmtlIxgBBqyWC#oBAVLgXDGE#Go9U0QRiKa" +
      "#nWBSZsJSX6LOX3jnkXn7QvmTznLhXhIuh8pTPcJj39o9DWtkGqsK3mrjuPOJRk6#4sxXqI" +
      "WBv$csa8tcQ8dEoC9mv68OkgCdUgCl#c401k523CPG#GMkPVGOY$deMYzB5PY9UPZ3T#XsT" +
      "qkOZRjKd5fAIo$IqlE#BFdtyJNSWmUm0YyxTlj3U12FO0zsOpMUnUFqSQKyNC$LU4aUmchv" +
      "Xpme3tYinWlOGaiFOrizBMt5Fbvx6KyFUbWoIpVSuTk6Vyd8w5k5KBcDtfg5NmBUhUZx9nL" +
      "z4Ow#aSyeLqikhiVEET$tF4BbEVJmhQENRya#lYKly2tPtxVaGD#It$SjUP5loI6#9I$sBN" +
      "c9RyaHlYLly2rPwLloPj#IotrBcj5XUmF4gb1njbgnwXb7hB9QduwAO7NN#B6RHjPzQuoIh" +
      "Ol6fin8Ne$8IFOh2#wom2du7fhetaDgPBG6gwGuuhbLal1TfG7yZh7mL62MDppp1#0xE3LA" +
      "KuMBLNS$zckxfsYhPWcgUwqVrlFuclnfCRwdeP9juoiynqTwd6tpv5AFhEo3i2TVSTHS3ys" +
      "HUkzL6UKh4RCE#qUD#8Rv78XQMSlJLDMxqqCwExo7N$QqO9znh36MdfTYZa4TzFo$Zebw$h" +
      "B9Vhc#Wv1DcjcbQX$QscET4VKJvRwAQ9SDjkk3KEIGNn5VQhqRtFrW9XpBNhnhjVlLkuJYe" +
      "ZchBy9djauySMNod9F5pBuRS$lkp3opcJdsP0xOczbSN#Pb$PXX3M2kD8XPpuNCNmOp4ndA" +
      "d68OiuDB#Usxd2Us4IxViHncmcDXy6gdlbsp6B#2$Be5s9A0H4RKPCRQIN7m9TBYUFgIoyk" +
      "WBmOz6wU#igdqBVw#H4iLqPC4dC7Jy9bemHDnAzxFmjbeZJOyROCdruguUsbmnU9jCxAMHh" +
      "ue3ZuqMZYn5WBKs88xl0NQSpS7cTsSoZpfD9tJD4KpdCxUD1KzXZDwrCTIEj$qQRJIKhtRx" +
      "fPIbIMZNfRyInRIkmpwKE3OxQdCzzDGXd96gLAqRG0V0pnB62hccPVxQbIYIbbAhxUbT5w5" +
      "jEAnxi92IoTZnHrV0j659woWelmIy6wBlgo5ec#aR4POyYJC8#ntmKbPnKR9Hib6oRZ6gl0" +
      "RxsZrY5LrY61#DBBkMsEKR1qqkcGaXhBWAalE$7qeJyyWNusCqg1zdExcEwej3UOSL3rLtI" +
      "TuvG$iCyzVplcck$ZjweSrcv3Vci#tjr2tVXxUVeYjM7vhFjrhl3FNjddIrcEkQH6Uf7cCS" +
      "cRjqUiGza$fYJaVt12riifJJ5Mz9Lu#rEvXBmls6SSSKmSzjlLk7ECSu$BylKzvOLsfeUTl" +
      "hwdz75DQnuRKgDEhVKU68eVvxgQ5x7du4TDUt6lX$UfTGhDJV1g0mpNMdtoQ4oRx8o1v7#b" +
      "kuWYGacBrfupJjAP63mm129YoEu3W9FA3Y1ojSoTWTBJuXDaMJNfBqoDEFLwWZYmjyn$odR" +
      "NkWHPDVeVsch3z2zBBQ2UBT2Jz7C2srqdpsBQ2T1h7hYUTIumcbj7VHQIFaoudtKgwafGom" +
      "TMaxvDkeCnHcnzjsBQPVP$KqUzsb1VINjvZWjkex#kwheMxZfGk3hkZjUvTH9FQzkIbkdyC" +
      "s$TJBfbjIQoFjurf7waB5Umlr7BzsJ#FT8Qkbn8BDR#MEWzJPokEwQRRrh5j2EaMKZu7W$i" +
      "XM42wdMD6QFqzY9vw$5RR7DublkIpeptCjxMRU#0uyPLj3QThMgx7VAhhRnFS1y6saNCAlc" +
      "VHXAQQDjDppzFrpDgn2HbsMHDySVROrYlLnfTegkUJNEMKjOqzPj60fcXNsuSTcXPh#hcN7" +
      "Y$Gn$3xnVKuglLaS3whzBpsQlgXfiSjcjXIqrwQZj9KporniQORDJsWwKVHSqpwbliuS3ns" +
      "VrBhRwFFNOVHtL5lhdNtYsnFw62pcwlzwyFnAJP$YnqoRHpr$Z7celTgO8NDbo9DvskwNOy" +
      "vP5BpcR9jZhTEdX$u7iQUVq98zt9D3sf$bhcFJz7xqyZNz4rjQu6ccMvokkym74N#Ixn8x9" +
      "1TiaeUjVNyIzt$IFoPU8hOBC$9$NAVt2lBvHvP9ajb2Li$KUFsoFloIrb3xgV4JuWV4syI$" +
      "7u9xSeXuWtY8C6OBWUKt6vPB7UIlYrtoErocooIMsMXt28BPBwyeaQy9aUaGcPAkPInzfRC" +
      "angPApVB7Bb9PiiigPOggPJzyghSA3CuOf$ibSTajV0x8kjahVn5riZFmhFwWtmaloVzdTm" +
      "jTwcMd#kUTzJzi$38tqQjrNlg$ZVYx$AfukcXh9GLkl#O$9FtNtD6w#K9sKX#CV6a$4QU9V" +
      "stl23FonRXTqqORsMRC7BAvxAJttrWYJhTJ6VsKCrQDVbPV5rBI4lCx9bjKybVnwmYZ$KXn" +
      "33MBo664hdgLv40OJ1ZCymp5wvGlvO4r2ycp0C8yo#v2U1tbmZWIkeQphxHj5FAUYdvAUoR" +
      "GdwiWe4SrdF8NyDCSJBvoUH7KiVLn2ZsdqlQbRGxwVb4Dj63w4dq8deJVOY#n0L4Fw8p4db" +
      "c3l3K7E2PEQ1EpOFOteNjMUGd43CK3FNhdNbMooTVI9IHBoCjX$dVNG6UDWmKaSvKCCnl8n" +
      "70zUJDlvvMagyaDVyth8fy0Vdnn4Jo4qcBsLvCVWpvQqbDN6J3O8sBDKPy0wxIECS37JGw4" +
      "fqqkhdWF0zaEZ1GO$R$063X4VW=");

  private final Action[] actions;

  public Parser() {
    super(PARSING_TABLES);
    actions = new Action[]{
      new Action() {  // [0] lst$DeclarationList = DeclarationList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Declaration> lst = new List();
            return lst.add((Declaration) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [1] lst$DeclarationList = lst$DeclarationList DeclarationList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Declaration) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [2] opt$lst$DeclarationList =
      Action.RETURN,  // [3] opt$lst$DeclarationList = lst$DeclarationList
      new Action() {  // [4] Module = H AH Q opt$lst$DeclarationList T
        public Symbol reduce(Symbol[] _symbols, int offset) {
          String var2 = (String) _symbols[offset + 2].value;
          List<Declaration> var4;
          if (_symbols[offset + 4].value == null) {
            var4 = new List<>();
          } else {
            if (_symbols[offset + 4] instanceof List) {
              var4 = (List) _symbols[offset + 4];
            } else {
              var4 = new List<>();
              var4.add((Declaration) _symbols[offset + 4]);
            }
          }
          return new Module(var2, var4);
        }
      },
      new Action() {  // [5] lst$VarDeclList = VarDeclList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<VarDecl> lst = new List();
            return lst.add((VarDecl) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [6] lst$VarDeclList = lst$VarDeclList VarDeclList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((VarDecl) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [7] opt$lst$VarDeclList =
      Action.RETURN,  // [8] opt$lst$VarDeclList = lst$VarDeclList
      new Action() {  // [9] FunctionDeclaration = TypeName AH R opt$lst$VarDeclList U BlockStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          TypeName var1 = (TypeName) _symbols[offset + 1].value;
          String var2 = (String) _symbols[offset + 2].value;
          List<VarDecl> var4;
          if (_symbols[offset + 4].value == null) {
            var4 = new List<>();
          } else {
            if (_symbols[offset + 4] instanceof List) {
              var4 = (List) _symbols[offset + 4];
            } else {
              var4 = new List<>();
              var4.add((VarDecl) _symbols[offset + 4]);
            }
          }
          BlockStatement var6 = (BlockStatement) _symbols[offset + 6].value;
          return new FunctionDeclaration(var1, var2, var4, var6);
        }
      },
      new Action() {  // [10] FieldDeclaration = VarDecl V
        public Symbol reduce(Symbol[] _symbols, int offset) {
          VarDecl var1 = (VarDecl) _symbols[offset + 1].value;
          return new FieldDeclaration(var1);
        }
      },
      new Action() {  // [11] VarDecl = TypeName AH
        public Symbol reduce(Symbol[] _symbols, int offset) {
          TypeName var1 = (TypeName) _symbols[offset + 1].value;
          String var2 = (String) _symbols[offset + 2].value;
          return new VarDecl(var1, var2);
        }
      },
      new Action() {  // [12] IntTypeName = G
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return new IntTypeName();
        }
      },
      new Action() {  // [13] BooleanTypeName = A
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return new BooleanTypeName();
        }
      },
      new Action() {  // [14] VoidTypeName = M
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return new VoidTypeName();
        }
      },
      new Action() {  // [15] LrBrackets = P S
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return new LrBrackets();
        }
      },
      new Action() {  // [16] lst$LrBrackets = LrBrackets
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<LrBrackets> lst = new List();
            return lst.add((LrBrackets) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [17] lst$LrBrackets = lst$LrBrackets LrBrackets
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((LrBrackets) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      new Action() {  // [18] PrimitiveArrayTypeName = PrimitiveTypeName lst$LrBrackets
        public Symbol reduce(Symbol[] _symbols, int offset) {
          PrimitiveTypeName var1 = (PrimitiveTypeName) _symbols[offset + 1].value;
          List<LrBrackets> var2;
          if (_symbols[offset + 2].value == null) {
            var2 = new List<>();
          } else {
            if (_symbols[offset + 2] instanceof List) {
              var2 = (List) _symbols[offset + 2];
            } else {
              var2 = new List<>();
              var2.add((LrBrackets) _symbols[offset + 2]);
            }
          }
          return new PrimitiveArrayTypeName(var1, var2);
        }
      },
      new Action() {  // [19] UserArrayTypeName = AH lst$LrBrackets
        public Symbol reduce(Symbol[] _symbols, int offset) {
          String var1 = (String) _symbols[offset + 1].value;
          List<LrBrackets> var2;
          if (_symbols[offset + 2].value == null) {
            var2 = new List<>();
          } else {
            if (_symbols[offset + 2] instanceof List) {
              var2 = (List) _symbols[offset + 2];
            } else {
              var2 = new List<>();
              var2.add((LrBrackets) _symbols[offset + 2]);
            }
          }
          return new UserArrayTypeName(var1, var2);
        }
      },
      new Action() {  // [20] LocalVariableDeclaration = VarDecl V
        public Symbol reduce(Symbol[] _symbols, int offset) {
          VarDecl var1 = (VarDecl) _symbols[offset + 1].value;
          return new LocalVariableDeclaration(var1);
        }
      },
      new Action() {  // [21] lst$StatementList = StatementList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Statement> lst = new List();
            return lst.add((Statement) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [22] lst$StatementList = lst$StatementList StatementList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Statement) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [23] opt$lst$StatementList =
      Action.RETURN,  // [24] opt$lst$StatementList = lst$StatementList
      new Action() {  // [25] BlockStatement = Q opt$lst$StatementList T
        public Symbol reduce(Symbol[] _symbols, int offset) {
          List<Statement> var2;
          if (_symbols[offset + 2].value == null) {
            var2 = new List<>();
          } else {
            if (_symbols[offset + 2] instanceof List) {
              var2 = (List) _symbols[offset + 2];
            } else {
              var2 = new List<>();
              var2.add((Statement) _symbols[offset + 2]);
            }
          }
          return new BlockStatement(var2);
        }
      },
      Action.NONE,    // [26] opt$ElseStatement =
      Action.RETURN,  // [27] opt$ElseStatement = ElseStatement
      new Action() {  // [28] IfStatement = E R Expression U Statement opt$ElseStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var3 = (Expression) _symbols[offset + 3].value;
          Statement var5 = (Statement) _symbols[offset + 5].value;
          Opt var6 = new Opt();
          if (_symbols[offset + 6] != null) {
            ElseStatement e = (ElseStatement) _symbols[offset + 6].value;
            var6 = new Opt(e);
          }
          return new IfStatement(var3, var5, var6);
        }
      },
      new Action() {  // [29] ElseStatement = C Statement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Statement var2 = (Statement) _symbols[offset + 2].value;
          return new ElseStatement(var2);
        }
      },
      new Action() {  // [30] WhileStatement = N R Expression U Statement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var3 = (Expression) _symbols[offset + 3].value;
          Statement var5 = (Statement) _symbols[offset + 5].value;
          return new WhileStatement(var3, var5);
        }
      },
      new Action() {  // [31] lst$AssignmentList = AssignmentList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Assignment> lst = new List();
            return lst.add((Assignment) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [32] lst$AssignmentList = lst$AssignmentList AssignmentList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Assignment) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [33] opt$lst$AssignmentList =
      Action.RETURN,  // [34] opt$lst$AssignmentList = lst$AssignmentList
      new Action() {  // [35] lst$ExpressionList = ExpressionList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Expression> lst = new List();
            return lst.add((Expression) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [36] lst$ExpressionList = lst$ExpressionList ExpressionList
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Expression) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [37] opt$lst$ExpressionList =
      Action.RETURN,  // [38] opt$lst$ExpressionList = lst$ExpressionList
      new Action() {  // [39] ForStatement = AM R opt$lst$AssignmentList V opt$lst$ExpressionList V opt$lst$ExpressionList U Statement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          List<Assignment> var3;
          if (_symbols[offset + 3].value == null) {
            var3 = new List<>();
          } else {
            if (_symbols[offset + 3] instanceof List) {
              var3 = (List) _symbols[offset + 3];
            } else {
              var3 = new List<>();
              var3.add((Assignment) _symbols[offset + 3]);
            }
          }
          List<Expression> var5;
          if (_symbols[offset + 5].value == null) {
            var5 = new List<>();
          } else {
            if (_symbols[offset + 5] instanceof List) {
              var5 = (List) _symbols[offset + 5];
            } else {
              var5 = new List<>();
              var5.add((Expression) _symbols[offset + 5]);
            }
          }
          List<Expression> var7;
          if (_symbols[offset + 7].value == null) {
            var7 = new List<>();
          } else {
            if (_symbols[offset + 7] instanceof List) {
              var7 = (List) _symbols[offset + 7];
            } else {
              var7 = new List<>();
              var7.add((Expression) _symbols[offset + 7]);
            }
          }
          Statement var9 = (Statement) _symbols[offset + 9].value;
          return new ForStatement(var3, var5, var7, var9);
        }
      },
      Action.NONE,    // [40] opt$Expression =
      Action.RETURN,  // [41] opt$Expression = Expression
      new Action() {  // [42] BreakStatement = B opt$Expression V
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Opt var2 = new Opt();
          if (_symbols[offset + 2] != null) {
            Expression e = (Expression) _symbols[offset + 2].value;
            var2 = new Opt(e);
          }
          return new BreakStatement(var2);
        }
      },
      new Action() {  // [43] ReturnStatement = J opt$Expression V
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Opt var2 = new Opt();
          if (_symbols[offset + 2] != null) {
            Expression e = (Expression) _symbols[offset + 2].value;
            var2 = new Opt(e);
          }
          return new ReturnStatement(var2);
        }
      },
      new Action() {  // [44] ExpressionStatement = Expression V
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          return new ExpressionStatement(var1);
        }
      },
      new Action() {  // [45] Assignment = LhsExpression Y Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          LhsExpression var1 = (LhsExpression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new Assignment(var1, var3);
        }
      },
      new Action() {  // [46] NegateExpression = AD Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var2 = (Expression) _symbols[offset + 2].value;
          return new NegateExpression(var2);
        }
      },
      new Action() {  // [47] AddExpr = Expression AF Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new AddExpr(var1, var3);
        }
      },
      new Action() {  // [48] SubExpr = Expression AD Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new SubExpr(var1, var3);
        }
      },
      new Action() {  // [49] MulExpr = Expression AG Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new MulExpr(var1, var3);
        }
      },
      new Action() {  // [50] DivExpr = Expression W Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new DivExpr(var1, var3);
        }
      },
      new Action() {  // [51] ModExpr = Expression AL Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new ModExpr(var1, var3);
        }
      },
      new Action() {  // [52] EqualExpr = Expression X Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new EqualExpr(var1, var3);
        }
      },
      new Action() {  // [53] NotEqualExpr = Expression AE Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new NotEqualExpr(var1, var3);
        }
      },
      new Action() {  // [54] LessThanExpr = Expression AC Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new LessThanExpr(var1, var3);
        }
      },
      new Action() {  // [55] GreaterThanExpr = Expression AA Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new GreaterThanExpr(var1, var3);
        }
      },
      new Action() {  // [56] GreaterThanEqualExpr = Expression Z Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new GreaterThanEqualExpr(var1, var3);
        }
      },
      new Action() {  // [57] LessThanEqualExpr = Expression AB Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new LessThanEqualExpr(var1, var3);
        }
      },
      new Action() {  // [58] FunctionCall = AH R opt$lst$ExpressionList U
        public Symbol reduce(Symbol[] _symbols, int offset) {
          String var1 = (String) _symbols[offset + 1].value;
          List<Expression> var3;
          if (_symbols[offset + 3].value == null) {
            var3 = new List<>();
          } else {
            if (_symbols[offset + 3] instanceof List) {
              var3 = (List) _symbols[offset + 3];
            } else {
              var3 = new List<>();
              var3.add((Expression) _symbols[offset + 3]);
            }
          }
          return new FunctionCall(var1, var3);
        }
      },
      new Action() {  // [59] StringLiteral = AJ
        public Symbol reduce(Symbol[] _symbols, int offset) {
          String var1 = (String) _symbols[offset + 1].value;
          return new StringLiteral(var1);
        }
      },
      new Action() {  // [60] IntLiteral = AI
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Integer var1 = Integer.parseInt((String) _symbols[offset + 1].value);
          return new IntLiteral(var1);
        }
      },
      new Action() {  // [61] TrueLiteral = K
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Boolean var1 = Boolean.parseBoolean((String) _symbols[offset + 1].value);
          return new TrueLiteral(var1);
        }
      },
      new Action() {  // [62] FalseLiteral = D
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Boolean var1 = Boolean.parseBoolean((String) _symbols[offset + 1].value);
          return new FalseLiteral(var1);
        }
      },
      new Action() {  // [63] ArrayLiteral = Q opt$lst$ExpressionList T
        public Symbol reduce(Symbol[] _symbols, int offset) {
          List<Expression> var2;
          if (_symbols[offset + 2].value == null) {
            var2 = new List<>();
          } else {
            if (_symbols[offset + 2] instanceof List) {
              var2 = (List) _symbols[offset + 2];
            } else {
              var2 = new List<>();
              var2.add((Expression) _symbols[offset + 2]);
            }
          }
          return new ArrayLiteral(var2);
        }
      },
      new Action() {  // [64] ArrayIndex = Expression P Expression S
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1].value;
          Expression var3 = (Expression) _symbols[offset + 3].value;
          return new ArrayIndex(var1, var3);
        }
      },
      new Action() {  // [65] VarName = AH
        public Symbol reduce(Symbol[] _symbols, int offset) {
          String var1 = (String) _symbols[offset + 1].value;
          return new VarName(var1);
        }
      },
      new Action() {  // [66] DeclarationY = Declaration
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Declaration var = (Declaration) _symbols[offset + 1];
          return var;
        }
      },
      new Action() {  // [67] lst$DeclarationY = DeclarationY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Declaration> lst = new List();
            return lst.add((Declaration) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [68] lst$DeclarationY = lst$DeclarationY DeclarationY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Declaration) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [69] opt$lst$DeclarationY =
      Action.RETURN,  // [70] opt$lst$DeclarationY = lst$DeclarationY
      new Action() {  // [71] DeclarationList = Declaration opt$lst$DeclarationY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Declaration var1 = (Declaration) _symbols[offset + 1];
          List<Declaration> result = new List<>();
          result.add(var1);
          Symbol var2 = _symbols[offset + 2];
          if (var2.value != null) {
            if (var2 instanceof List) {
              for (Declaration symbol : (List<Declaration>) var2) {
                result.add(symbol);
              }
            } else {
              result.add((Declaration) var2);
            }
          }
          return result;
        }
      },
      new Action() {  // [72] VarDeclY = O VarDecl
        public Symbol reduce(Symbol[] _symbols, int offset) {
          VarDecl var = (VarDecl) _symbols[offset + 2];
          return var;
        }
      },
      new Action() {  // [73] lst$VarDeclY = VarDeclY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<VarDecl> lst = new List();
            return lst.add((VarDecl) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [74] lst$VarDeclY = lst$VarDeclY VarDeclY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((VarDecl) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [75] opt$lst$VarDeclY =
      Action.RETURN,  // [76] opt$lst$VarDeclY = lst$VarDeclY
      new Action() {  // [77] VarDeclList = VarDecl opt$lst$VarDeclY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          VarDecl var1 = (VarDecl) _symbols[offset + 1];
          List<VarDecl> result = new List<>();
          result.add(var1);
          Symbol var2 = _symbols[offset + 2];
          if (var2.value != null) {
            if (var2 instanceof List) {
              for (VarDecl symbol : (List<VarDecl>) var2) {
                result.add(symbol);
              }
            } else {
              result.add((VarDecl) var2);
            }
          }
          return result;
        }
      },
      new Action() {  // [78] StatementY = Statement
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Statement var = (Statement) _symbols[offset + 1];
          return var;
        }
      },
      new Action() {  // [79] lst$StatementY = StatementY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Statement> lst = new List();
            return lst.add((Statement) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [80] lst$StatementY = lst$StatementY StatementY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Statement) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [81] opt$lst$StatementY =
      Action.RETURN,  // [82] opt$lst$StatementY = lst$StatementY
      new Action() {  // [83] StatementList = Statement opt$lst$StatementY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Statement var1 = (Statement) _symbols[offset + 1];
          List<Statement> result = new List<>();
          result.add(var1);
          Symbol var2 = _symbols[offset + 2];
          if (var2.value != null) {
            if (var2 instanceof List) {
              for (Statement symbol : (List<Statement>) var2) {
                result.add(symbol);
              }
            } else {
              result.add((Statement) var2);
            }
          }
          return result;
        }
      },
      new Action() {  // [84] AssignmentY = O Assignment
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Assignment var = (Assignment) _symbols[offset + 2];
          return var;
        }
      },
      new Action() {  // [85] lst$AssignmentY = AssignmentY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Assignment> lst = new List();
            return lst.add((Assignment) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [86] lst$AssignmentY = lst$AssignmentY AssignmentY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Assignment) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [87] opt$lst$AssignmentY =
      Action.RETURN,  // [88] opt$lst$AssignmentY = lst$AssignmentY
      new Action() {  // [89] AssignmentList = Assignment opt$lst$AssignmentY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Assignment var1 = (Assignment) _symbols[offset + 1];
          List<Assignment> result = new List<>();
          result.add(var1);
          Symbol var2 = _symbols[offset + 2];
          if (var2.value != null) {
            if (var2 instanceof List) {
              for (Assignment symbol : (List<Assignment>) var2) {
                result.add(symbol);
              }
            } else {
              result.add((Assignment) var2);
            }
          }
          return result;
        }
      },
      new Action() {  // [90] ExpressionY = O Expression
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var = (Expression) _symbols[offset + 2];
          return var;
        }
      },
      new Action() {  // [91] lst$ExpressionY = ExpressionY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          if (_symbols[offset + 1] instanceof List) {
            return _symbols[offset + 1];
          } else {
            List<Expression> lst = new List();
            return lst.add((Expression) _symbols[offset + 1]);
          }
        }
      },
      new Action() {  // [92] lst$ExpressionY = lst$ExpressionY ExpressionY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          ((List) _symbols[offset + 1].value).add((Expression) _symbols[offset + 2]);
          return _symbols[offset + 1];
        }
      },
      Action.NONE,    // [93] opt$lst$ExpressionY =
      Action.RETURN,  // [94] opt$lst$ExpressionY = lst$ExpressionY
      new Action() {  // [95] ExpressionList = Expression opt$lst$ExpressionY
        public Symbol reduce(Symbol[] _symbols, int offset) {
          Expression var1 = (Expression) _symbols[offset + 1];
          List<Expression> result = new List<>();
          result.add(var1);
          Symbol var2 = _symbols[offset + 2];
          if (var2.value != null) {
            if (var2 instanceof List) {
              for (Expression symbol : (List<Expression>) var2) {
                result.add(symbol);
              }
            } else {
              result.add((Expression) var2);
            }
          }
          return result;
        }
      },
      new Action() {  // [96] Declaration = FunctionDeclaration
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (FunctionDeclaration) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [97] Declaration = FieldDeclaration
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (FieldDeclaration) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [98] TypeName = PrimitiveTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (PrimitiveTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [99] TypeName = VoidTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (VoidTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [100] TypeName = ArrayTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ArrayTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [101] PrimitiveTypeName = IntTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (IntTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [102] PrimitiveTypeName = BooleanTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (BooleanTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [103] ArrayTypeName = PrimitiveArrayTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (PrimitiveArrayTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [104] ArrayTypeName = UserArrayTypeName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (UserArrayTypeName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [105] Statement = LocalVariableDeclaration
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (LocalVariableDeclaration) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [106] Statement = BlockStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (BlockStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [107] Statement = IfStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (IfStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [108] Statement = ElseStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ElseStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [109] Statement = LoopStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (LoopStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [110] Statement = BreakStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (BreakStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [111] Statement = ReturnStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ReturnStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [112] Statement = ExpressionStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ExpressionStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [113] LoopStatement = WhileStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (WhileStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [114] LoopStatement = ForStatement
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ForStatement) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [115] Expression = Assignment
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (Assignment) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [116] Expression = LhsExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (LhsExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [117] Expression = UnaryExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (UnaryExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [118] Expression = BinaryExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (BinaryExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [119] Expression = FunctionCall
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (FunctionCall) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [120] Expression = Literal
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (Literal) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [121] LhsExpression = ArrayIndex
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ArrayIndex) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [122] LhsExpression = VarName
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (VarName) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [123] UnaryExpression = NegateExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (NegateExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [124] BinaryExpression = ArithmeticExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ArithmeticExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [125] BinaryExpression = ComparisionExpression
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ComparisionExpression) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [126] ArithmeticExpression = AddExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (AddExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [127] ArithmeticExpression = SubExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (SubExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [128] ArithmeticExpression = MulExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (MulExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [129] ArithmeticExpression = DivExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (DivExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [130] ArithmeticExpression = ModExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ModExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [131] ComparisionExpression = EqualExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (EqualExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [132] ComparisionExpression = NotEqualExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (NotEqualExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [133] ComparisionExpression = LessThanExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (LessThanExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [134] ComparisionExpression = GreaterThanExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (GreaterThanExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [135] ComparisionExpression = GreaterThanEqualExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (GreaterThanEqualExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [136] ComparisionExpression = LessThanEqualExpr
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (LessThanEqualExpr) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [137] Literal = StringLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (StringLiteral) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [138] Literal = IntLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (IntLiteral) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [139] Literal = BooleanLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (BooleanLiteral) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [140] Literal = ArrayLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (ArrayLiteral) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [141] BooleanLiteral = TrueLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (TrueLiteral) _symbols[offset + 1].value;
        }
      },
      new Action() {  // [142] BooleanLiteral = FalseLiteral
        public Symbol reduce(Symbol[] _symbols, int offset) {

          return (FalseLiteral) _symbols[offset + 1].value;
        }
      }
    };
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
